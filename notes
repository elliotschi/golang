bin: contains executable files

pkg: contains compiled files

src: contains package source files

25 keywords

:= used inside functions => you don't need to put a declaration.

otherwise you need var, const

datatypes: boolean, numeric types: int8 int32, strings("" or ``) 
- can access strings by variableName[0]

- storing things in bytes

- there is one error type, but there is also a package called errors that you can import

- group definitions import (), const(), var()

arrays: 
var arr[n]type

n: length of array : since length is included in the declaration, we cannot change the size of arrays
type: the type of its elements

- want to use slice to get a copy of an array

c := [...]int{4,5,6} - using this syntax we read all the elements and finds the length

nestedArray := [2][4]int{[4]int{1,2,3,4}, [4]int{5,6,7,8}}

more concise way of doing this is 

nestedArray := [2][4]int{{1,2,3,4}, {5,6,7,8}}

slice: slice points to an underlying array where the length is not required

array[i:j] is a copy from i to j

array[:n] is the same as array[0:n]
array[n:] is the same as array[n:len(array)]
array[:] slices the whole array

slice is a reference type, so any changes will change the variables pointing to the same slice or array.

MAPS: objects

map[keyType]valueType for definition
- specify the type for the keys and the value

gets & sets

ie: var numbers map[string] int

or 

numbers := make(map[string]int)

- maps are disorderly, no fixed length, but it has a len property

use delete to delete and element
delete(map, key)

-make vs new:

make does memory allocation for built in models, and new is for types' memory allocation

- new returns pointer

IF - doesn't need parens in Go.
- it can have one init statement before the conitional : the variables defined in in there can be used in the block of the if statement

ie: 
if x: computedValue(); x > 10 {
}

this will call the function computedValue and then see if x is > 10

else if and else are the same

GOTO - keyword: goto reroutes the control flow to a previously defined label

labels are anything that ends with ":"

for expression1; expression2; exression3

we can omit expressions if we want
for is identical to while

break & continue both exist

switch syntax:

switch sExpr {
  case expr1:
    some instructions
}

functions:

- use the function keyword
- can have multiple returns

pointers:

faster and can use one reference for many different functions

defer keyword:

multiple defers will be executed backwards

functions as values and as types:

functions are also variables so we can define them with type

type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...])

declaring functions as types allows use to pass functions to other functions as values

- Golang doesn't have try catch, so there is panic and recover instead

Panic is a build in function to break the normal flow of a function. the function will not run but the defers will continue to execute and then wait until all those functions return from panic

recover is a built in function that recovers go from panic status. so it is useful to put recover functions inside of defer functions

main vs init

main function can only be used in the main package and init can be used in any package..
- these two functions can not have arguments or returns
- they are called automatically

- imports/packages
- dot operators in imports allow you to omit the package name

ie: import (
  . "fmt"
) 
=> whenever we use fmt functions, we do not need to put fmt.printf

- alias operator basically like import * as in es6

- '_' operator
this means we just want to execute the init function but not use any of its packages

STRUCT
- similar to classes?
- we can declare new containers like creating a type called person in which we can give them properties

ie. type person struct {
  name string
  age int
}

var P person
P.name = ''
P.age = 1

- all the types in Go can be used as embedded fields

overloading is like accessing the prototype chain - getting the fields from upper levels of the struct

if they have two of the same fields

Object-oriented in Go..
- using `method` - using a function as a field in a struct
- method is associated with the type

syntax of declaring a method:

func (r ReceiverType) funcName(parameters) (results)

- if method names are the same, but they dont have the same receiver they are not the same
- methods have access to fields in their receiver
- use `.` to call a method inside of a struct

Customized Types: 
syntax: type typeName typeLiteral

ie:
type age int
type money float32
type months map[string]int

- you can use as many methods in custom types as you want

- use a pointer `b` if you want to change the actual value and not the copy of the value
- methods are named capital or lowercase based of whether it is public or private